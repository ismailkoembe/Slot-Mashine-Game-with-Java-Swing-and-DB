/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.ikoembe.slotMachine;

import com.mysql.jdbc.exceptions.MySQLSyntaxErrorException;
import static de.ikoembe.slotMachine.NumberGenerator.NumberGenarator;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author ikoembe
 */
public class SlotMachineGUI extends javax.swing.JFrame implements NumberGenerator {

   public int credit;
       
    
   public SlotMachineGUI() {

        initComponents();
        SwingTools.centerOnScreen(1, this);
        ShowUsers();
        
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new JSeparator();
        btnUser1 = new JButton();
        jPanel1 = new JPanel();
        btnSpin = new JButton();
        labelCredit = new JLabel();
        creditSlider = new JSlider();
        textCreditStatus = new JTextField();
        btnSymbol1 = new JButton();
        btnSymbol2 = new JButton();
        btnSymbol3 = new JButton();
        textId = new JTextField();
        textFirstName = new JTextField();
        textLastName = new JTextField();
        textCredit = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        btnInsert = new JButton();
        btnDelete = new JButton();
        jScrollPane1 = new JScrollPane();
        tableDisplayUsers = new JTable();
        textUserName = new JTextField();
        btnFinish = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Slot Machine ikoembe 2019");
        setName("Spiel Maschine 2019"); // NOI18N
        setSize(new Dimension(100, 100));
        getContentPane().setLayout(new AbsoluteLayout());

        jSeparator1.setForeground(new Color(51, 51, 51));
        getContentPane().add(jSeparator1, new AbsoluteConstraints(0, 353, 921, 10));

        btnUser1.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/user1.jpg"))); // NOI18N
        getContentPane().add(btnUser1, new AbsoluteConstraints(10, 27, 201, -1));

        jPanel1.setBackground(new Color(51, 51, 51));
        jPanel1.setBorder(BorderFactory.createLineBorder(new Color(255, 0, 0)));

        btnSpin.setFont(new Font("Tahoma", 1, 24)); // NOI18N
        btnSpin.setForeground(new Color(255, 0, 0));
        btnSpin.setText("SPIN");
        btnSpin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSpinActionPerformed(evt);
            }
        });

        labelCredit.setBackground(new Color(255, 0, 0));
        labelCredit.setFont(new Font("Tahoma", 1, 24)); // NOI18N
        labelCredit.setForeground(new Color(255, 255, 255));
        labelCredit.setHorizontalAlignment(SwingConstants.LEFT);
        labelCredit.setText("â‚¬");

        creditSlider.setBackground(new Color(255, 51, 51));
        creditSlider.setForeground(new Color(255, 255, 0));
        creditSlider.setMaximum(3000);
        creditSlider.setMinimum(100);
        creditSlider.setOrientation(JSlider.VERTICAL);

        textCreditStatus.setEditable(false);
        textCreditStatus.setFont(new Font("Tahoma", 1, 24)); // NOI18N
        textCreditStatus.setHorizontalAlignment(JTextField.CENTER);
        textCreditStatus.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                textCreditStatusActionPerformed(evt);
            }
        });

        btnSymbol1.setFont(new Font("Tahoma", 1, 48)); // NOI18N
        btnSymbol1.setText("7");

        btnSymbol2.setFont(new Font("Tahoma", 1, 48)); // NOI18N
        btnSymbol2.setText("7");

        btnSymbol3.setFont(new Font("Tahoma", 1, 48)); // NOI18N
        btnSymbol3.setText("7");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnSpin, GroupLayout.PREFERRED_SIZE, 301, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelCredit, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textCreditStatus, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnSymbol1, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSymbol2, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSymbol3, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(creditSlider, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(creditSlider, GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSymbol3, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSymbol2, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnSymbol1, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSpin, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(labelCredit, GroupLayout.Alignment.TRAILING)
                    .addComponent(textCreditStatus, GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new AbsoluteConstraints(253, 21, -1, 310));

        textId.setEditable(false);
        textId.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(textId, new AbsoluteConstraints(80, 380, 135, 32));

        textFirstName.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(textFirstName, new AbsoluteConstraints(80, 430, 135, 34));

        textLastName.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(textLastName, new AbsoluteConstraints(80, 490, 135, 34));

        textCredit.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(textCredit, new AbsoluteConstraints(80, 540, 135, 34));

        jLabel1.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(SwingConstants.LEFT);
        jLabel1.setText("Id");
        getContentPane().add(jLabel1, new AbsoluteConstraints(10, 390, 64, 20));

        jLabel2.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(SwingConstants.LEFT);
        jLabel2.setText("First Name");
        getContentPane().add(jLabel2, new AbsoluteConstraints(10, 440, 64, -1));

        jLabel3.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(SwingConstants.LEFT);
        jLabel3.setText("Credit");
        getContentPane().add(jLabel3, new AbsoluteConstraints(10, 550, 64, -1));

        jLabel4.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(SwingConstants.LEFT);
        jLabel4.setText("Last Name");
        getContentPane().add(jLabel4, new AbsoluteConstraints(10, 500, 64, -1));

        btnInsert.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/add.png"))); // NOI18N
        btnInsert.setText("Insert");
        btnInsert.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        getContentPane().add(btnInsert, new AbsoluteConstraints(280, 440, 110, 41));

        btnDelete.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/delete.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new AbsoluteConstraints(280, 490, 110, 41));

        tableDisplayUsers.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Credit"
            }
        ));
        tableDisplayUsers.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                tableDisplayUsersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableDisplayUsers);

        getContentPane().add(jScrollPane1, new AbsoluteConstraints(412, 357, 500, 190));
        getContentPane().add(textUserName, new AbsoluteConstraints(10, 270, 200, 30));

        btnFinish.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/refresh.png"))); // NOI18N
        btnFinish.setText("Finish");
        btnFinish.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });
        getContentPane().add(btnFinish, new AbsoluteConstraints(780, 293, 110, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSpinActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSpinActionPerformed

        try {
          credit=Integer.parseInt(textCreditStatus.getText());  
        } catch (NumberFormatException e) {
            System.out.println("e = " + e);
        }

        credit-=100;
        
        try {
            Thread.sleep(1000);/*Wait 1 second*/
        } catch (InterruptedException ex) {
            Logger.getLogger(SlotMachineGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        int number1 = NumberGenarator(true);//it interacts with interface
        int number2 = NumberGenarator(true);//it interacts with interface
        int number3 = NumberGenarator(true);//it interacts with interface

        switch (number1) {
            case 1: 
            btnSymbol1.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/melon.jpg"))); 
            break;
            case 2:
            btnSymbol1.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/strawberry.jpg")));
            break;
            case 3:
            btnSymbol1.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/plum.jpg"))); 
            break;
            case 4:
            btnSymbol1.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/bell.jpg"))); 
            break;
            case 5:
            btnSymbol1.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/cherry.jpg"))); 
            break;
            case 6:
            btnSymbol1.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/dimond.jpg"))); 
            break;
        }
        
        switch (number2) {
            case 1: 
            btnSymbol2.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/melon.jpg"))); 
            break;
            case 2:
            btnSymbol2.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/strawberry.jpg")));
            break;
            case 3:
            btnSymbol2.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/plum.jpg"))); 
            break;
            case 4:
            btnSymbol2.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/bell.jpg"))); 
            break;
            case 5:
            btnSymbol2.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/cherry.jpg"))); 
            break;
            case 6:
            btnSymbol2.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/dimond.jpg"))); 
            break;
        }
   
        switch (number3) {
            case 1: 
            btnSymbol3.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/melon.jpg"))); 
            break;
            case 2:
            btnSymbol3.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/strawberry.jpg")));
            break;
            case 3:
            btnSymbol3.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/plum.jpg"))); 
            break;
            case 4:
            btnSymbol3.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/bell.jpg"))); 
            break;
            case 5:
            btnSymbol3.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/cherry.jpg"))); 
            break;
            case 6:
            btnSymbol3.setIcon(new ImageIcon(getClass().getResource("/de/ikoembe/slotMachine/images/dimond.jpg"))); 
            break;
        }
        
        
        if (number1==number2&&number2==number3){
            credit+=100;
            
            textCreditStatus.setText(String.valueOf(credit));
            creditSlider.setValue(credit);
        }else if (number1==number2||number2==number3||number1==number3){
            credit+=200;
            textCreditStatus.setText(String.valueOf(credit));
            creditSlider.setValue(credit);
        }else 
            textCreditStatus.setText(String.valueOf(credit));
            creditSlider.setValue(credit);
            
        if (credit<=100){
            int n = JOptionPane.showConfirmDialog(this, "Sie haben kein genug Geld "
                    + "oder Sie kein Benutzer auswÃ¤hlen haben. ",
                    "Slot Maschine", JOptionPane.YES_NO_OPTION);
            if (n==0){
                credit=100;
           
            }else System.exit(0);
        }
        
    }//GEN-LAST:event_btnSpinActionPerformed

    private void btnInsertActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        /**Credit can be only number.*/
        String query = "INSERT INTO `users`(`fname`, `lname`, `credit`) "
        + "VALUES ('"+textFirstName.getText()+"','"+textLastName.getText()+"',"+textCredit.getText()+")";
        execute(query, "Inserted");
        
        try {
            int x= Integer.parseInt(textCredit.getText());
                if(x<0){
                throw new NumberFormatException();
            }

        }catch (NumberFormatException e) {
            String message="Control your input!!!";
            JOptionPane.showMessageDialog(null, " Credit can be only number. "+message);
        }

    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeleteActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String query = "DELETE FROM `users` WHERE id = "+textId.getText();
        execute(query, "Deleted");
        textId.setText("");
        textFirstName.setText("");
        textLastName.setText("");
        textCredit.setText("");
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tableDisplayUsersMouseClicked(MouseEvent evt) {//GEN-FIRST:event_tableDisplayUsersMouseClicked
        // Get The Index Of The Slected Row 
        int i = tableDisplayUsers.getSelectedRow();
        TableModel model = tableDisplayUsers.getModel();
        
         /** Display Slected Row In JTexteFields*/
        textId.setText(model.getValueAt(i,0).toString());
        textFirstName.setText(model.getValueAt(i,1).toString());
        textLastName.setText(model.getValueAt(i,2).toString());
        textCredit.setText(model.getValueAt(i,3).toString());
        //Set actual credit status
        textCreditStatus.setText(model.getValueAt(i,3).toString());
        //Designate user name from table
        textUserName.setText(model.getValueAt(i, 1).toString());
    }//GEN-LAST:event_tableDisplayUsersMouseClicked

    private void textCreditStatusActionPerformed(ActionEvent evt) {//GEN-FIRST:event_textCreditStatusActionPerformed
        try {
            creditSlider.setValue(Integer.parseInt(textCredit.getText()));
        } catch (NumberFormatException ex) {
            textCreditStatus.setText(""+creditSlider.getValue());
        }
 
    }//GEN-LAST:event_textCreditStatusActionPerformed

    private void btnFinishActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnFinishActionPerformed
     /**update new credit value to DB*/
     String query = "UPDATE `users` SET `credit`="+textCreditStatus.getText()+" WHERE `id` = "+ textId.getText();
     execute(query, "Credit Updated");
     textCredit.setText(textCreditStatus.getText());

    }//GEN-LAST:event_btnFinishActionPerformed
        /** get the connection*/
   public Connection getConnection(){
       Connection con;
       try {
          con = DriverManager.getConnection("jdbc:mysql://localhost/test_db", "root","");
       return con;
       } catch (SQLException ex) {
           System.out.println(ex);
           return null;
       }
   }

        /** Execute The Insert And Delete Querys*/
   public void execute(String query, String message){
       Connection con = getConnection();
       Statement st;
       try{
           st = con.createStatement();
           if((st.executeUpdate(query)) == 1){
               // refresh jtable data           CASTING
               DefaultTableModel model = (DefaultTableModel)tableDisplayUsers.getModel();
               model.setRowCount(0);
               ShowUsers();
               
               JOptionPane.showMessageDialog(null, "Data "+message+" Succefully");
           }else{
               JOptionPane.showMessageDialog(null, "Data Not "+message);
           }
       }catch(SQLException ex) {
           System.out.println(ex);
       }
       
   }

        /** get a list of users from mysql database*/
   public ArrayList<User> getUsersList(){
       ArrayList<User> usersList = new ArrayList<User>();
       Connection connection = getConnection();
       String query = "SELECT * FROM `users` ";
       Statement st;
       ResultSet rs;

       try {
           st = connection.createStatement();
           rs = st.executeQuery(query);
           User user;
           while(rs.next())
           {
               user = new User(rs.getInt("id"),rs.getString("fname"),rs.getString("lname"),rs.getInt("credit"));
               usersList.add(user);
           }
       } catch (Exception e) {
           e.printStackTrace();
       }
       
       return usersList;
       
   }
    
    /**Display data in table*/
    public void ShowUsers(){
       ArrayList<User> list = getUsersList();
                                    //CASTING
       DefaultTableModel model = (DefaultTableModel)tableDisplayUsers.getModel();
       Object[] row = new Object[4];
       for(int i = 0; i < list.size(); i++){
           row[0] = list.get(i).getId();
           row[1] = list.get(i).getFirstName();
           row[2] = list.get(i).getLastName();
           row[3] = list.get(i).getCredit();
           model.addRow(row);
       }
    }
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {   
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SlotMachineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SlotMachineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SlotMachineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SlotMachineGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SlotMachineGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnDelete;
    private JButton btnFinish;
    private JButton btnInsert;
    private JButton btnSpin;
    private JButton btnSymbol1;
    private JButton btnSymbol2;
    private JButton btnSymbol3;
    private JButton btnUser1;
    private JSlider creditSlider;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JSeparator jSeparator1;
    private JLabel labelCredit;
    private JTable tableDisplayUsers;
    private JTextField textCredit;
    private JTextField textCreditStatus;
    private JTextField textFirstName;
    private JTextField textId;
    private JTextField textLastName;
    private JTextField textUserName;
    // End of variables declaration//GEN-END:variables


}

